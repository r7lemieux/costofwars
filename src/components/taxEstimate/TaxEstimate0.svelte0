<script lang="ts">
  import {computeTax} from '$components/taxEstimate/tax.computer'
  import * as store from '../../stores/tax.store'

  export let taxPaid
  export let done

  let salary = 0
  let period = '1'
  let tax
  let income
  let married = false
  let headOfHouse = false
  let fileJointly = false
  $: taxPaid = taxChanged(income, married, fileJointly, headOfHouse)

  const taxChanged = (income, married, fileJointly, headOfHouse) => {
    //todo optimize, maybe subscribe
    const tax = computeTax(income, married, fileJointly, headOfHouse)
    store.taxPaid.set(tax)
    return tax
  }

  const salaryChanged = ev => {
    const el = document.getElementById('salary')
    salary = Number(el!['value'])
    income = salary * period
    store.income.set(income)
  }
  const periodChanged = ev => {
    console.log(`==>periodChanged `)
    period = (ev.target.value)
    income = salary * period
  }

  const marriedChanged = ev => {
    married = ev.target.checked
    if (married) {
      headOfHouse = false
    } else {
      fileJointly = false
    }
    setStore()
  }

  const fileJointlyChanged = ev => {
    fileJointly = ev.target.checked
    if (fileJointly) {
      married = true
      headOfHouse = false
    }
    setStore()
  }

  const headOfHouseChanged = ev => {
    headOfHouse = ev.target.checked
    if (headOfHouse) {
      married = false
      fileJointly = false
    }
    setStore()
  }

  const setStore = () => {
    store.married.set(married)
    store.fileJointly.set(fileJointly)
    store.headOfHouse.set(headOfHouse)
  }

  const taxBlur = ev => {
    const el = document.getElementById('taxPaid')
    taxPaid = Number(el['value'])
    store.taxPaid.set(taxPaid)
    if (taxPaid) {
      done()
    }
  }

  let taxTimeout = 0
  const taxKeyUp = ev => {
    clearTimeout(taxTimeout)
    taxTimeout = setTimeout(taxBlur, 200)
  }
  let salaryTimeout = 0
  const salaryKeyUp = ev => {
    clearTimeout(salaryTimeout)
    clearTimeout(taxTimeout)
    salaryTimeout = setTimeout(salaryChanged, 2000)
    taxTimeout = setTimeout(taxBlur, 3000)
  }
</script>
<h2 class="text">Enter tax paid or salary</h2>

<section class="top">
        <label for="taxPaid">Tax Paid</label>
        <input type="number" id="taxPaid" name="taxPaid" bind:value={taxPaid} on:blur={taxBlur} on:keyup={taxKeyUp}/>
    <label for="salary">Salary</label>
    <span class="input">
        <input type=number id="salary" on:change="{salaryChanged}" on:blur={done} on:keyup={salaryKeyUp}/>
        <select id="salaryPeriod" name="salaryPeriod" value="{period}" on:change="{periodChanged}" >
            <option value={1} selected>Annually</option>
            <option value={12}>Monthly</option>
            <option value={52}>Weekly</option>
            <option value={268}>Daily</option>
            <option value={2144}>Hourly</option>
        </select>
    </span>
    {#if !!income}

    <div class="row">
        <span class="text">That is ${income} per year</span>

    </div>
    <div class="row">

        <span class="check">
            <input type="checkbox" id="married" checked={married} on:change="{marriedChanged}"/>
            <label for="married">Married</label>
        </span>

        <span class="check">
            <input disabled={headOfHouse} type="checkbox" id="fileJointly" checked={fileJointly} on:change="{fileJointlyChanged}"/>
            <label for="married">File Jointly</label>
        </span>
    </div>

    <div class="row check">
        <input type="checkbox" id="headOfHouse" checked={headOfHouse} on:change="{headOfHouseChanged}"/>
        <label disabled={married} for="headOfHouse">Head Of House</label>
    </div>
    {/if}

</section>
<style>
    input {
        height: 1.5rem;
        width: 7rem;
    }
    input[type=checkbox] {
        height: 1.5rem;
        width: 1.5rem;
    }

    .top {
        display: grid;
        grid-template-columns: [label] 5rem [main] auto;
        column-gap: 1rem;
        row-gap: 1rem;
    }
    .top>label {
        grid-column-start: label;
        grid-column-end: main;
        text-align: right;
    }
    .text, .input, .row {
        grid-column-start: main;
    }
    .input select {
        height: 100%;
        top: -0.04rem;
        position: relative;
    }
    .top label, .top .check input  {
        align-self: center;
    }
    .top .check {
        display: inline-flex;
        gap: 0.5rem;
        align-items: center;
    }
    .top .check label {
        margin: 0 1rem 0 0;
    }
</style>
